/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int i=0;
    int[] nums= new int[10000];
    public boolean isSymmetric(TreeNode root) {
        /*if(root==null){
            return true;
        }
        if(root.left==null&&root.right==null){
            nums[i++]=root.val;
            return true;
        }
       
        if(root.left!=null){
            isSymmetric(root.left);
        }
        if(root.left==null){
            nums[i++] = -1;
        }
        nums[i] = root.val;
        i++;
        if(root.right!=null){
            isSymmetric(root.right);
        }
        if(root.right==null){
            nums[i++] = -1;
        }
        
        for(int j=0;j<i;j++){
            if(nums[j]!=nums[i-j-1]){
                return false;
            }
        }
        return (true&&f);*/  //中序遍历的做法不可行。不能唯一确定一棵树。
        
        if(root==null){
            return true;
        }
        if(root.left==null&&root.right==null){
            return true;
        }
        return bijiao(root.left,root.right);
    }
     public boolean bijiao(TreeNode r1, TreeNode r2){
        if(r1==null && r2==null){
            return true;
        }
        if(r1==null || r2==null){
            return false;
        }
        if(r1.val != r2.val){
            return false;
        }
        return bijiao(r1.left, r2.right) && bijiao(r1.right, r2.left);
    }
}